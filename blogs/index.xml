<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on TianShangXing&#39;s Blog</title>
    <link>https://tianshangxing.github.io/blog/blogs/</link>
    <description>Recent content in Blogs on TianShangXing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 18 Jun 2020 22:25:49 +0800</lastBuildDate>
    
	<atom:link href="https://tianshangxing.github.io/blog/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python语法进阶</title>
      <link>https://tianshangxing.github.io/blog/blogs/python%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Thu, 18 Jun 2020 22:25:49 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/python%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/</guid>
      <description>python优点 简单，易学，免费，开源，高层语言，可扩展性，可移植性，解释型语言，面向对象，丰富的库，规范的代码
变量的类型 标识符命名规则   小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName；
  大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：FirstName；
  下划线命名法：用下划线“_”来连接所有的单词，比如my_name。
  如何在python中查找关键字 可以在Python Shell通过以下命令进行查看当前系统中python的关键字
import keyword keyword.kwlist 常用的格式符号有哪些    格式符 转换     %c 字符   %s 字符串   %d 有符号十进制整数   %u 无符号十进制整数   %f 浮点数    算术运算符    运算符 描述     + 加   - 减   * 乘   / 除   // 取整除   % 取余   ** 指数    python常用的数据类型转换    函数 说明     int(x, [base]) 将x转换为一个整数   float(x) 将x转换为一个浮点数   str(x) 将对象 x 转换为字符串   tuple(s) 将序列 s 转换为一个元组   list(s ) 将序列 s 转换为一个列表    python中的比较运算符    运算符 描述 示例     == 检查两个操作数的值是否相等，如果是则条件变为真。 如a=3,b=3，则（a == b) 为 True   !</description>
    </item>
    
    <item>
      <title>Python基础语法练习</title>
      <link>https://tianshangxing.github.io/blog/blogs/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Wed, 17 Jun 2020 23:16:49 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/</guid>
      <description>Python基础语法练习 # 1.	str = &amp;quot; fgh &amp;quot; 写一个函数，只去掉字符串右侧的空格，左侧的空格保留 def func(): str = &amp;quot; fgh &amp;quot; print(str.rstrip(&#39; &#39;)) func() # 2.	输入10个数字到列表中，如果输入的不是数字，则跳过，不存 def func(): l = [] b = 1 while True: b += 1 if len(l) == 10: break a = input(&amp;quot;请输入数字：&amp;quot;) if a.isdigit(): a = int(a) l.append(a) else: continue print(l) func() # 3.	写一个函数，可以判断一个字符串是否为回文例子qwewq，函数返回true或者false def func(): s = input(&#39;请输入字符串：&#39;) if s == s[::-1]: return True else: return False print(func()) # 4.</description>
    </item>
    
    <item>
      <title>Linux下安装JDK，MySQL，tomcat</title>
      <link>https://tianshangxing.github.io/blog/blogs/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdkmysqltomcat/</link>
      <pubDate>Tue, 16 Jun 2020 22:47:04 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdkmysqltomcat/</guid>
      <description>我本地的Linux环境是Ubuntu，安装需要用到apt命令
 Ubuntu下安装JDK  更新软件包列表  sudo apt-get update 安装JDK  sudo apt-get install openjdk-8-jdk 查看Java版本，看是否安装成功  java -version openjdk version &amp;quot;1.8.0_252&amp;quot; OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1ubuntu1-b09) OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)  出现JDK版本说明安装成功
  还可以通过输入java和javac查看是否安装成功
   Ubuntu下安装MySQL 1.安装MySQL
sudo apt-get install mysql-server 安装完成连接MySQL  mysql -h 127.0.0.1 -u root -p Enter password: 输入MySQL密码就可以链接成功 Welcome to the MySQL monitor. Commands end with ; or \g.</description>
    </item>
    
    <item>
      <title>Linux基础</title>
      <link>https://tianshangxing.github.io/blog/blogs/linux%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 15 Jun 2020 23:25:37 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/linux%E5%9F%BA%E7%A1%80/</guid>
      <description>Linux   目前市面上用的操作环境
Windows	mac	Linux	麒麟	DOS
  Linux简介
Linux是一个基于POSIX和unix的多用户 多任务 支持多线程和 多cpu的一个操作系统
  Linux的发行版：
Ubuntu	RedHat	CentOS	Debian	SUse
  Linux的使用领域：
LNMP Linux+Nginx+mysql+Php
LAMP Linux+apache+mysql+Php
  Linux的安装：
 在虚拟机中进行安装linux 使用云服务的linux （阿里云 腾讯云）     常用命令   ls /：展示当前目录下的所有文件
 etc：存放配置文件和子目录 var：存放日志以及线程程序 bin/usr/sbin：系统用户使用的命令    对文件的操作
 cd ..：进入上一级目录 cd ../：进入根目录 cd **：进入任意文件夹 ls：展示所有文件夹下的子文件夹和子文件 ls -l：展示文件属性以及文件所属的用户和组    l rwx rwx rwx</description>
    </item>
    
    <item>
      <title>JMeter与MySQL交互</title>
      <link>https://tianshangxing.github.io/blog/blogs/jmeter%E4%B8%8Emysql%E4%BA%A4%E4%BA%92/</link>
      <pubDate>Thu, 11 Jun 2020 21:57:56 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/jmeter%E4%B8%8Emysql%E4%BA%A4%E4%BA%92/</guid>
      <description>JMeter与MySQL交互  建立线程组  添加JDBC Connection Configuration  添加JDBC Request  查看结构树就可以看到查询结果  </description>
    </item>
    
    <item>
      <title>JMeter使用</title>
      <link>https://tianshangxing.github.io/blog/blogs/jmeter%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 10 Jun 2020 23:39:21 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/jmeter%E4%BD%BF%E7%94%A8/</guid>
      <description>JMeter测试 性能测试类型  基准测试：在给系统施加较低压力时，查看系统的运行状况并记录相关数做为基础参考 负载测试：是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等 。 压力测试：压力测试是评估系统处于或超过预期负载时系统的运行情况，关注点在于系统在峰值负载或超出最大载荷情况下的处理能力。 稳定性测试（可靠性测试）：在给系统加载一定业务压力的情况下，使系统运行一段时间，以此检测系统是否稳定。24X3小时 并发测试：测试多个用户同时访问同一个应用、同一个模块或者数据记录时是否存在死锁或者其他性能问题，  线程组 进程：一个正在执行的程序对应一个进程 线程：一个进程有多个执行线程 线程组：按照线程性质对线程分组 三者关系：一个进程有多个线程组，一个线程组有多个线程
测试计划—线程组—线程组属性中的线程数
并发执行：多个线程同时执行，特点：执行结束的顺序与开始的顺序不一致
顺序执行：按照线程的启动顺序挨个执行
默认情况下，线程组中的线程是并发执行
每一个线程都要执行组内的http请求 设置线程组顺序执行：勾选测试计划中的（独立运行每个线程组）
线程组用来模拟用户的并发访问
 线程组主要包含三个参数：线程数、准备时长(Ramp-Up Period(in seconds))、循环次数。 线程数：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数在这里也就是设置多少个线程数。 准备时长（秒）：设置的虚拟用户数需要多长时间全部启动。如果线程数为20 ，准备时长为10 ，那么需要10秒钟启动20个线程。也就是每秒钟启动2个线程。 循环次数：每个线程发送请求的次数。如果线程数为20 ，循环次数为100 ，那么每个线程发送100次请求。总请求数为20*100=2000 。如果勾选了“永远”，那么所有线程会一直发送请求，一到选择停止运行脚本。 调度器：设置线程组启动的开始时间和结束时间(配置调度器时，需要勾选循环次数为永远) 持续时间（秒）：测试持续时间，会覆盖结束时间 启动延迟（秒）：测试延迟启动时间，会覆盖启动时间 启动时间：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前时间也会覆盖它。 结束时间：测试结束时间，持续时间会覆盖它。   JMeter主要组件   测试计划是使用 JMeter 进行测试的起点，它是其它 JMeter 测试元件的容器。
  线程组：代表一定数量的并发用户，它可以用来模拟并发用户发送请求。实际的请求内容在Sampler中定义，它被线程组包含。可以在“测试计划-&amp;gt;添加-&amp;gt;线程组”来建立它，然后在线程组面板里有几个输入栏：线程数、Ramp-Up Period(in seconds)、循环次数，其中Ramp-Up Period(in seconds)表示在这时间内创建完所有的线程。如有8个线程，Ramp-Up = 200秒，那么线程的启动时间间隔为200/8=25秒，这样的好处是：一开始不会对服务器有太大的负载。线程组是为模拟并发负载而设计。
  取样器（Sampler）：模拟各种请求。所有实际的测试任务都由取样器承担，存在很多种请求。如：HTTP 、ftp请求等等。
  监听器：负责收集测试结果，同时也被告知了结果显示的方式。功能是对取样器的请求结果显示、统计一些数据（吞吐量、KB/S……）等。
  逻辑控制器：允许自定义JMeter发送请求的行为逻辑，它与Sampler结合使用可以模拟复杂的请求序列。
  断言：用于来判断请求响应的结果是否如用户所期望，是否正确。它可以用来隔离问题域，即在确保功能正确的前提下执行压力测试。这个限制对于有效的测试是非常有用的。</description>
    </item>
    
    <item>
      <title>JMeter</title>
      <link>https://tianshangxing.github.io/blog/blogs/jmeter/</link>
      <pubDate>Tue, 09 Jun 2020 21:48:24 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/jmeter/</guid>
      <description>JMeter  Apache JMeter是Apache组织开发的基于Java的压力测试工具。
用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。
JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。
Apache JMeter可以用于对静态的和动态的资源（文件，Servlet，Perl脚本，java 对象，数据库和查询，FTP服务器等等）的性能进行测试。它可以用于对服务器、网络或对象模拟繁重的负载来测试它们的强度或分析不同压力类型下的整体性能。你可以使用它做性能的图形分析或在大并发负载测试你的服务器/脚本/对象。
下载JMeter  官网： https://jmeter.apache.org/
讲下载下来的zip压缩文件解压到相应的文件夹，再配置好环境变量
进入bin目录
直到出现以下界面就算安装完成了
JMeter的作用  能够对HTTP和FTP服务器进行压力和性能测试， 也可以对任何数据库进行同样的测试（通过JDBC）。 完全的可移植性和100% 纯java。 完全 Swing 和轻量组件支持（预编译的JAR使用 javax.swing.*)包。 完全多线程 框架允许通过多个线程并发取样和 通过单独的线程组对不同的功能同时取样。 精心的GUI设计允许快速操作和更精确的计时。 缓存和离线分析/回放测试结果。  意义  Label： 定义的HTTP请求名称 Samples： 表示这次测试中一共发出了多少个请求 Average： 访问页面的平均响应时间 Min: 访问页面的最小响应时间 Max: 访问页面的最大响应时间 Error%： 错误的请求的数量/请求的总数 Throughput：每秒完成的请求数 KB/Sec： 每秒从服务器端接收到的数据量  </description>
    </item>
    
    <item>
      <title>Charles</title>
      <link>https://tianshangxing.github.io/blog/blogs/charles/</link>
      <pubDate>Mon, 08 Jun 2020 21:49:26 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/charles/</guid>
      <description>Charles  Charles是一款Http代理服务器和Http监视器，当移动端在无线网连接中按要求设置好代理服务器，使所有对网络的请求都经过Charles客户端来转发时，Charles可以监控这个客户端各个程序所有连接互联网的Http通信。
Charles官网： https://www.charlesproxy.com/
下载相应系统的Charles安装包，然后一键安装即可。
Charles功能  截取http 和https 网络封包(抓包) 支持和重发网络请求 支持修改网络参数 支持网络请求请求并修改 支持弱网测试  Charles抓包详解 Filter ： 过滤，可以输入关键字来快速筛选出 URL 中带指定关键字的网络请求
Overview ： 查看这次请求的详细内容，例如耗时详细列车了请求开始时间、结束时间，响应开始时间、结束时间，总耗时、DNS耗时、网络延时等。
对于Size也详细列出了请求头大小、响应头大小、压缩比例等内容。
URL：进行网络请求的链接；
Status：当前状态，complete表示请求完成；
Responce Code：返回码。不同的接口，不同的请求结果，返回码都不同；
Protocol：使用的协议；
Method：请求方式，如GET请求，POST请求等；
Kept Alive：判断当前是否正在链接（活跃）；
Content-Type:发送的内容类型，如这里用的是XML文本，以UTF8的方式发送；
Client Address：客户端的IP地址；
Remote Address：远程服务器的IP；
Timing: Request Start Time：请求开始的时间；
Request End Time：请求结束的时间；
Response Start Time：返回开始的时间；
Response End Time : 返回结束的时间；
Duration : 总时间；
Size: Request Header ：请求的头部大小；
Response Header：返回的头部大小；
Request : 请求发送的大小；
Response：返回数据的大小；
Total：所有数据大小；
Request Compression : 请求压缩；</description>
    </item>
    
    <item>
      <title>Monkey命令</title>
      <link>https://tianshangxing.github.io/blog/blogs/monkey%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 07 Jun 2020 22:03:43 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/monkey%E5%91%BD%E4%BB%A4/</guid>
      <description>Monkey命令   通过使用程序模拟用户对移动端设备操作(单击 拖动 滑动 按键等)进行压力测试
  可以使用Monkey命令进行检测多长时间内发生异常错误
  出现的方式：
 程序的访问量的多少 程序在一定时间内进行压力尝试一直程序的奔溃 异常 错误    使用Monkey命令的方式
 手动的方式在模拟器或者是真机操作 可以使用云测平台对于不同的手机不同的系统版本不同的测试    monkey命令的启动 adb shell monkey + 命令参数  对app进行多次访问的测试  adb monkey -p com.wan.android(包名\具体的页面) 100访问的测试  显示日志的详细程度
-v 包括 启动提示 测试完成 最终结果
-v -v 标为详细的日志 发送到activity(页面的)的事件信息
-v -v -v 最为详细的日志 测试中选中或者是没有选中的activity(信息)测试信息
  打印日志的命令
adb shell monkey 200 &amp;gt;d:/monkeylog.txt 调整触摸事件的占比  --pct-touch 调整触摸事件的占比 用于用户对app的操作上的时间延迟  --throttle 用于用户对app的操作上的时间延迟 单位是毫秒 如果没有时间的延迟 monkey会以最快的方式进行操作 发送请求 动作事件的占比  --pct-motion 动作事件的占比   --ignore-crashes 如果app发生崩溃或者是异常的时候 monkey会停止执行 如果在abd 命令中有此命令参数 mongkey会继续执行直至事件计数完成 --ignore-timeouts (ANR) APP发生超时限制的时候 如果在abd 命令中有此命令参数 mongkey会继续执行直至事件计数完成 0: 触摸事件的占比 1： 手势事件占比 2： 两指操作占比 3： 动作事件(有一定轨迹) 4： 屏幕旋转的占比 5： 导航事件 上下左右 6： 导航事件 home 回退 隐形菜单 7： 按键事件 关机键 音量添加 减少 8： 启动activity事件 9： 键盘抬起事件</description>
    </item>
    
    <item>
      <title>MySQL练习</title>
      <link>https://tianshangxing.github.io/blog/blogs/mysql%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Sat, 06 Jun 2020 22:45:29 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/mysql%E7%BB%83%E4%B9%A0/</guid>
      <description>MySQL练习题 -- 1.	创建test1数据库 CREATE DATABASE test1 charset=utf8; use test1; -- 2.	在test1数据库中创建student表 create table student( id int PRIMARY KEY auto_increment, name VARCHAR(20), score int, address VARCHAR(50), useremail VARCHAR(20) ); -- 3.	向student表中添加记录 insert into student VALUES (1, &#39;张三&#39;, 98, &#39;北京&#39;, &#39;111111111@qq.com&#39;), (2, &#39;李四&#39;, 88, &#39;上海&#39;, &#39;111111112@qq.com&#39;), (3, &#39;王五&#39;, 78, &#39;广州&#39;, &#39;111111113@qq.com&#39;), (4, &#39;赵六&#39;, 68, &#39;深圳&#39;, &#39;111111114@qq.com&#39;), (5, &#39;孙七&#39;, 58, &#39;杭州&#39;, &#39;111111115@qq.com&#39;), (6, &#39;小红&#39;, 48, &#39;北京&#39;, &#39;111111116@qq.com&#39;), (7, &#39;小黑&#39;, 99, &#39;上海&#39;, &#39;1111111117@qq.</description>
    </item>
    
  </channel>
</rss>