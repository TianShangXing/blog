<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on TianShangXing&#39;s Blog</title>
    <link>https://tianshangxing.github.io/blog/blogs/</link>
    <description>Recent content in Blogs on TianShangXing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 31 May 2020 00:10:30 +0800</lastBuildDate>
    
	<atom:link href="https://tianshangxing.github.io/blog/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用户后台管理测试用例</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E7%94%A8%E6%88%B7%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Sun, 31 May 2020 00:10:30 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E7%94%A8%E6%88%B7%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>测试用例</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Fri, 29 May 2020 23:06:14 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description>测试计划  需求 提取测试点 编写测试用例  测试用例 测试用例的定义：
执行测试的依据，将测试的操作步骤进行以文档的方式记录下来
测试用例的格式：
测试用例的模块	测试用例的编号	执行条件	测试输入	预期结果	实际结果
测试用例的模块：操作软件的一个大的菜单	命名以模块名称为主
测试用例的编号：命名以菜单下具体功能_数字
执行条件：操作的先决条件
测试输入：对具体的功能操作步骤
预期结果：以需求文档上的内容为主
实际结果：依据测试数据的内容输出后得到的结果可能与预期一致或者不一致
​
测试用例的特性：
代表性：能够代表并覆盖各种合理的和不合理、合法的和不合法的、边界的和越界的以及极限的输入数据、操作等。
针对性：对程序中的可能存在的错误有针对性地测试
可判定性：测试执行结果的正确性是可判定的，每一个测试用例都应有相应的期望结果
可重现性：对同样的测试用例，系统的执行结果应当是相同的
测试用例的输入类型：
 字母 数字 特殊符号 空字符 汉字  软件分类
OA：办公自动化
crm：客户管理系统
ERP：进销存系统
编写测试用例的时候3步骤走：
 根据需求提取测试用例的测试点 根据测试点内容输入不同数据类型 得到不用结果来编写测试用例  测试方法(测试策略)  等价类划分法 边界值法 因果图法 正交法 场景法 错误推断法  测试评审的标准  测试用例的正确性测试用例不含有争议 测试用例是否冗余 测试用例的覆盖率 测试用例是否满足需求文档  评审的内容有以下几个方面
 用例设计的结构安排是否清晰、合理，是否利于高效对需求进行覆盖。 优先极安排是否合理。 是否覆盖测试需求上的所有功能点。 用例是否具有很好可执行性。例如用例的前提条件、执行步骤、输入数据和期待结果是否清晰、正确_期待结果是否有明显的验证方法。 是否已经删除了冗余的用例。 是否包含充分的负面测试用例。充分的定义，如果在这里使用2&amp;amp;8法则，那就是4倍于正面用例的数量，毕竟一个健壮的软件，其中80%的代码都是在&amp;quot;保护&amp;quot;20%的功能实现。 是否从用户层面来设计用户使用场景和使用流程的测试用例。 是否简洁，复用性强。例如，可将重复度高的步骤或过程抽取出来定义为一些可复用标准步骤  </description>
    </item>
    
    <item>
      <title>测试基础</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 28 May 2020 22:38:31 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</guid>
      <description>软件开发的生命周期   客户提出需求(概念)
  根据客户的需求写出相对应的需求文档
  前端设计效果图(原型图)
后台开发人员设计与编写代码实现功能
测试人员根据需求文档编写测试计划和测试用例
  在后台开发实现功能后根据测试用例测试人员进行测试
  开发完全结束后，测试人员进行整体测试，全面测试，测试成功后进入上线
  软件上线后根据用户体验和实际效果进行小版本迭代
  软件缺陷产生的原因种类  需求变更次数频繁 理解误差 产品或者客户 开发和设计 代码问题 开发人员 运维 资源使用率产生 公司问题  测试流程  在立项会上根据客户需求编写需求文档/规格说明书，UI设计原型图后台编码，测试人员编写测试计划和测试用例 随着开发的代码实现，测试进行测试评审 主要代码实现后测试人员先进行冒烟测试 代码实现后测试执行测试用例 根据执行的结果进行对应bug提交给相对于的开发人员让其修改代码 开发修改后测试人员进行回归测试  冒烟测试：在这个软件中主要功能实现后进行测试
回归测试：在开发人员修改后进行的同一个问题的测试
软件测试的分类   按阶段划分
  单元测试：对一个模块测试
  集成测试：对多个模块测试(有一定的关联)
  系统测试：在软件编译后执行的整体测试
  验收测试：对软件执行后的用户体验的测试
​	α 阿尔法测试：有一定的开发测试人员的测试 内测
​	β 贝塔测试： 只有用户参与的测试 公测</description>
    </item>
    
    <item>
      <title>代码实现验证码功能</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 29 Apr 2020 21:44:36 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/</guid>
      <description>现在大部分网址登录时都需要输验证码才允许登录，在这里我用python代码来实现手写一套验证码逻辑
Django后端代码 # 导入图片库 # 绘画库 from PIL import ImageDraw # 字体库 from PIL import ImageFont # 图片库 from PIL import Image # 随机库 import random # 文件流 import io # 自定义图片验证码 class MyCode(View): # 定义RGB随机颜色 def get_random_color(self): R = random.randrange(255) G = random.randrange(255) B = random.randrange(255) return(R, G, B) # 定义图片视图 def get(self, request): # 画布 img_size = (130, 60) # 定义图片对象 image = Image.new(&#39;RGB&#39;, img_size, &#39;#FFFFE0&#39;) # 定义画笔 draw = ImageDraw.</description>
    </item>
    
    <item>
      <title>百度智能云文字识别</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E4%BA%91%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</link>
      <pubDate>Tue, 28 Apr 2020 16:11:20 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E4%BA%91%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</guid>
      <description>现在好多的网址在登录时都需要输入验证码才能够登录成功，防止被恶意登录
今天我就教你们一招用百度智能云来帮助我们破解验证码
首先，先申请百度智能云： https://cloud.baidu.com/
然后在人工智能 -&amp;gt; 文字识别模块 新建一个应用
建立成功后，会分配给你一个key和secret
只不过这个接口免费版的每秒最多只能请求两次，一天有500次的请求机会
这里推荐使用高精度的接口，普通的识别率太差了
在帮助文档里找到 通用文字识别（高精度版）
第一步，获取access_token
# 获取token res = requests.get(&amp;quot;https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;amp;client_id=你的key&amp;amp;client_secret=你的秘钥&amp;quot;) res = json.loads(str(res.text)) token = res[&#39;access_token&#39;] 然后请求高精度识别接口，需要注意一点，这里图片需要转换成base64编码
# 接口地址 url = &#39;https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=&#39; + token # 定义头部信息 myheaders = {&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;} # 操作图片 myimg = open(&#39;./code.png&#39;, &#39;rb&#39;) # 读取图片 temp_img = myimg.read() myimg.close() # 进行base64编码 temp_data = {&#39;image&#39;:base64.b64encode(temp_img)} # 对图片地址进行urlencode操作 temp_data = urllib.parse.urlencode(temp_data) # 请求视图接口 res = requests.post(url=url, data=temp_data, headers=myheaders) code = res.</description>
    </item>
    
    <item>
      <title>MD5加密</title>
      <link>https://tianshangxing.github.io/blog/blogs/md5%E5%8A%A0%E5%AF%86/</link>
      <pubDate>Thu, 23 Apr 2020 22:35:48 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/md5%E5%8A%A0%E5%AF%86/</guid>
      <description>MD5加密算法  代码实现
# 导入加密库 import hashlib # md5加密方法 def make_password(mypass): # 生成md5对象 md5 = hashlib.md5() # 转码操作 mypass_utf8 = str(mypass).encode(encoding=&amp;quot;utf-8&amp;quot;) # 加密操作 md5.update(mypass_utf8) # 返回密文 return md5.hexdigest() </description>
    </item>
    
    <item>
      <title>HeyUI</title>
      <link>https://tianshangxing.github.io/blog/blogs/heyui/</link>
      <pubDate>Thu, 23 Apr 2020 22:10:39 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/heyui/</guid>
      <description>HeyUI  HeyUI 是一套基于 Vue2.0 的开源 UI 组件库，主要服务于一些中后台产品。
HeyUI 是一个自动化图形化界面组件，便于后端研发入手前端。
HeyUI 提供的是一整套解决方案，所有的组件提供全局的可配置模式
官网： https://www.heyui.top/
安装 npm install heyui --save
使用 import HeyUI from &#39;heyui&#39;; Vue.use(HeyUI); new Vue({ el: &#39;#app&#39;, router, components: { App }, template: &#39;&amp;lt;App/&amp;gt;&#39;, render: h =&amp;gt; h(App) }) </description>
    </item>
    
    <item>
      <title>Django</title>
      <link>https://tianshangxing.github.io/blog/blogs/django/</link>
      <pubDate>Wed, 22 Apr 2020 17:11:46 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/django/</guid>
      <description>Django Django是一个开放源代码的Web应用框架，由Python写成。采用了MVT的软件设计模式，即模型（Model），视图（View）和模板（Template）。
安装依赖 pip install Django==2.0.4 pip install django-cors-headers pip install djangorestframework pip install PyMySQL pip install opencv-python pip install opencv-contrib-python pip install numpy pip install pillow pip install dwebsocket 依赖文件生成 requirements.txt pip freeze &amp;gt; requirements.txt 依赖文件安装 requirements.txt pip install -r requirements.txt 新建Django项目 django-admin startproject mydjango 新建子应用 python manage.py startapp myapp 数据库迁移 python manage.py makemigrations myapp python manage.py migrate 反向迁移 python manage.py inspectdb &amp;gt; mymodels.py 启动项目 python manage.py runserver 项目仓库： https://github.</description>
    </item>
    
    <item>
      <title>Vue.js常用语法</title>
      <link>https://tianshangxing.github.io/blog/blogs/vue.js%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 22 Apr 2020 17:10:41 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/vue.js%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
      <description>Vue.js 模板语法 Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。
Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。
结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。
 文本插值 数据绑定最常见的形式就是使用 {{&amp;hellip;}}（双大括号）的文本插值：
&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;{{ msg }}&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; Html 使用 v-html 指令用于输出 html 代码：
&amp;lt;!-- 解析html语法 --&amp;gt; &amp;lt;div v-html=&amp;quot;msg&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; export default { data() { return { msg: &#39;&amp;lt;h1&amp;gt;变量&amp;lt;/h1&amp;gt;&#39;, } } } &amp;lt;/script&amp;gt; v-show 我们也可以使用 v-show 指令来根据条件展示元素：
&amp;lt;div&amp;gt; &amp;lt;h3 v-show=&amp;quot;ok&amp;quot;&amp;gt;Hello World&amp;lt;/h3&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; export default { data() { return { ok: 1, // 0:false 1:true, } } } &amp;lt;/script&amp;gt; 缩写 Vue.</description>
    </item>
    
    <item>
      <title>Vue.js</title>
      <link>https://tianshangxing.github.io/blog/blogs/vue.js/</link>
      <pubDate>Tue, 21 Apr 2020 21:41:54 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/vue.js/</guid>
      <description>Vue.js Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。
Vue.js 是用于构建交互式的 Web 界面的库。
Vue.js 提供了 MVVM 数据绑定和一个可组合的组件系统，具有简单、灵活的 API。
官网： https://cn.vuejs.org/
安装流程 设置源 npm set registry https://registry.npmjs.org/ 设置国内源 npm set registry https://registry.npm.taobao.org 查看源 npm config list 升级npm npm install npm -g 全局安装 vue-cli npm install -g vue-cli npm清理缓存 npm cache clean --force 安装vue脚手架的命令，采用webpack打包工具，项目名是project vue init webpack project cd &amp;lt;项目名&amp;gt; npm install axios --save npm install style-loader —-save npm install heyui --save npm install js-md5 --save 进入项目 热启动 npm run dev 退出服务 ctrl + c 如果出现任何关于node依赖的问题导致服务无法启动，执行npm install无法解决的，则安装rimraf,然后进入项目目录下，执行rimraf node_modules 删除后，重新执行 npm install 安装依赖</description>
    </item>
    
  </channel>
</rss>