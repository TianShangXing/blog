<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on TianShangXing&#39;s Blog</title>
    <link>https://tianshangxing.github.io/blog/blogs/</link>
    <description>Recent content in Blogs on TianShangXing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 07 Jun 2020 22:03:43 +0800</lastBuildDate>
    
	<atom:link href="https://tianshangxing.github.io/blog/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Monkey命令</title>
      <link>https://tianshangxing.github.io/blog/blogs/monkey%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 07 Jun 2020 22:03:43 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/monkey%E5%91%BD%E4%BB%A4/</guid>
      <description>Monkey命令   通过使用程序模拟用户对移动端设备操作(单击 拖动 滑动 按键等)进行压力测试
  可以使用Monkey命令进行检测多长时间内发生异常错误
  出现的方式：
 程序的访问量的多少 程序在一定时间内进行压力尝试一直程序的奔溃 异常 错误    使用Monkey命令的方式
 手动的方式在模拟器或者是真机操作 可以使用云测平台对于不同的手机不同的系统版本不同的测试    monkey命令的启动 adb shell monkey + 命令参数  对app进行多次访问的测试  adb monkey -p com.wan.android(包名\具体的页面) 100访问的测试  显示日志的详细程度
-v 包括 启动提示 测试完成 最终结果
-v -v 标为详细的日志 发送到activity(页面的)的事件信息
-v -v -v 最为详细的日志 测试中选中或者是没有选中的activity(信息)测试信息
  打印日志的命令
adb shell monkey 200 &amp;gt;d:/monkeylog.txt 调整触摸事件的占比  --pct-touch 调整触摸事件的占比 用于用户对app的操作上的时间延迟  --throttle 用于用户对app的操作上的时间延迟 单位是毫秒 如果没有时间的延迟 monkey会以最快的方式进行操作 发送请求 动作事件的占比  --pct-motion 动作事件的占比   --ignore-crashes 如果app发生崩溃或者是异常的时候 monkey会停止执行 如果在abd 命令中有此命令参数 mongkey会继续执行直至事件计数完成 --ignore-timeouts (ANR) APP发生超时限制的时候 如果在abd 命令中有此命令参数 mongkey会继续执行直至事件计数完成 0: 触摸事件的占比 1： 手势事件占比 2： 两指操作占比 3： 动作事件(有一定轨迹) 4： 屏幕旋转的占比 5： 导航事件 上下左右 6： 导航事件 home 回退 隐形菜单 7： 按键事件 关机键 音量添加 减少 8： 启动activity事件 9： 键盘抬起事件</description>
    </item>
    
    <item>
      <title>MySQL练习</title>
      <link>https://tianshangxing.github.io/blog/blogs/mysql%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Sat, 06 Jun 2020 22:45:29 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/mysql%E7%BB%83%E4%B9%A0/</guid>
      <description>MySQL练习题 -- 1.	创建test1数据库 CREATE DATABASE test1 charset=utf8; use test1; -- 2.	在test1数据库中创建student表 create table student( id int PRIMARY KEY auto_increment, name VARCHAR(20), score int, address VARCHAR(50), useremail VARCHAR(20) ); -- 3.	向student表中添加记录 insert into student VALUES (1, &#39;张三&#39;, 98, &#39;北京&#39;, &#39;111111111@qq.com&#39;), (2, &#39;李四&#39;, 88, &#39;上海&#39;, &#39;111111112@qq.com&#39;), (3, &#39;王五&#39;, 78, &#39;广州&#39;, &#39;111111113@qq.com&#39;), (4, &#39;赵六&#39;, 68, &#39;深圳&#39;, &#39;111111114@qq.com&#39;), (5, &#39;孙七&#39;, 58, &#39;杭州&#39;, &#39;111111115@qq.com&#39;), (6, &#39;小红&#39;, 48, &#39;北京&#39;, &#39;111111116@qq.com&#39;), (7, &#39;小黑&#39;, 99, &#39;上海&#39;, &#39;1111111117@qq.</description>
    </item>
    
    <item>
      <title>App移动端测试</title>
      <link>https://tianshangxing.github.io/blog/blogs/app%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Thu, 04 Jun 2020 23:07:39 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/app%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%95/</guid>
      <description>App移动端测试  现有市场上的移动端操作系统：
 Android iOS 微软 塞班 华为（未来）  测试范围就是移动端的软件 公司内部一般选择的是真机测试/云测试 如果应用程序在Android进行测试 bug的数量居多 如果应用程序在iOS上测试 bug的数量少很多
移动端测试内容有   应用程序的功能测试
 测试的时间：移动端的开发结束后 测试的依据：需求文档和UI设计效果图 测试的内容：测试页面，测试程序的逻辑功能的实现    安装和卸载的测试
  软件安装后是否可以正常运行
  安装过程中是否可以取消
  安装空间不足时，是否有相应提示
  是否可以卸载应用（可通过桌面卸载，也可以通过软件卸载)
  卸载是否支持取消功能，单击取消后软件卸载功能是否正常
  卸载后文件是否全部删除所有的安装文件夹
  从不同的应用市场下载进行安装测试，比如测试小米市场，华为市场，应用宝，安卓市场的安装测试。
    软件的升级测试
 当客户端有新版本时，是否有更新提示，当版本为非强制升级版时，用户可以取消更新，老版本能正常使用用户在下次启动App时，仍能出现更新提示。 当版本为强制升级版时，当给出强制更新后用户没有做更新时，退出客户端，下次启动App时，仍出现强制升级提示，当然现在强更已经很少出现了。 检查更新后各个功能是否能正常使用。 现在主流的安装更新方式开始向热更新热部署方式转变，就是在用户不需要手动更新的情况下，完成版本的静默更新。    登陆测试
 登录用户名和密码错误时，界面有提示信息 用户主动退出登陆后，下次进入app时，应该进入登陆界面 切换账号登录，检验登录的信息是否做到及时更新 对于多个端（web、iOS、Android等）进行操作时，确保数据库操作无误，且每个端可以及时看到数据的更新,一个账号只允许一台机器登陆的软件，需要账号登录多个手机时，是否将原用户踢下线，且能够给出提示信息    权限测试</description>
    </item>
    
    <item>
      <title>MySQL进阶</title>
      <link>https://tianshangxing.github.io/blog/blogs/mysql%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Wed, 03 Jun 2020 19:54:48 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/mysql%E8%BF%9B%E9%98%B6/</guid>
      <description>MySQL  MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。
官网： https://www.mysql.com/cn/
 MySQL查询  查询所有字段
select * from 表名; 例： select * from students; 查询指定字段
select 列1,列2,... from 表名; 例: select name from students; 使用 as 给字段起别名
select id as 序号, name as 名字, gender as 性别 from students; 例: -- 如果是单表查询 可以省略表名 select id, name, gender from students; -- 表名.字段名 select students.id,students.name,students.gender from students; -- 可以通过 as 给表起别名 select s.</description>
    </item>
    
    <item>
      <title>MySQL基础</title>
      <link>https://tianshangxing.github.io/blog/blogs/mysql%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 02 Jun 2020 22:11:14 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/mysql%E5%9F%BA%E7%A1%80/</guid>
      <description>MySQL  MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。
官网： https://www.mysql.com/cn/
 MySQL数据类型 MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。
 数值类型 MySQL支持所有标准SQL数值数据类型。
这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。
关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。
BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。
作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。
下面的表显示了需要的每个整数类型的存储和范围。
 日期和时间类型 表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。
每个时间类型有一个有效值范围和一个&amp;quot;零&amp;quot;值，当指定不合法的MySQL不能表示的值时使用&amp;quot;零&amp;quot;值。
 字符串类型 字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。
注意：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。
CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。
BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。
BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。
有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</description>
    </item>
    
    <item>
      <title>缺陷报告和测试管理工具</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E7%BC%BA%E9%99%B7%E6%8A%A5%E5%91%8A%E5%92%8C%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jun 2020 20:59:03 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E7%BC%BA%E9%99%B7%E6%8A%A5%E5%91%8A%E5%92%8C%E6%B5%8B%E8%AF%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>缺陷报告编写 缺陷严重程度划分：系统崩溃，严重，一般，次要，建议
修正优先级：高，中，低
Bug定级示例 1级，系统崩溃
定义：严重阻碍测试和开发工作 对应优先级：最高 具体可分为：
 功能完全没有实现 应用闪退/崩溃无法运行 应用必现安全模式，无法运行 其他导致功能无法测试的问题  2级，至关重要
定义：非阻碍用例执行的严重问题
对应优先级：高
具体可分为：
 简单操作应用闪退/崩溃，卡死 数据丢失 严重影响系统，自身功能无法运行 严重数值计算错误 数据库损坏或无法保存配置 安全性问题（包括数据加密等）  3级，主要
定义：功能存在缺陷，但不影响应用和系统的稳定性
对应优先级：中
具体可分为：
 内存泄露（长时间不用的对象需要被回收，不被回收占内存） 功能实现逻辑覆盖不全面 非必现，但复现概率超过50%的闪退/崩溃和安全模式  4级，一般
定义：对应用熟悉度高才能感知到的问题，对应用基本功能实现无影响
对应优先级：中
具体可分为：
 轻微数值计算错误 功能实现有误，与产品文档不完全贴切 用户简单操作，即可明显感知的UI问题  5级，较小
定义：界面，性能缺陷 对应优先级：低
具体可分为：
 操作界面错误（提示显示规则，刷新规则是否与文档一致） 边界条件显示错误 提示信息和界面效果展示错误（包括未给出信息、信息提示错误等） 复现率低于5%的闪退/崩溃和安全模式 插件兼容和性能未优化问题 非正常操作导致UI显示异常  6级，建议
定义：对于产品的意见或者建议 对应优先级：低
具体可分为：
 对于产品设计方面的意见和建议 对于产品界面优化方面的意见和建议 对于产品需要优化增强用户体验方面的意见和建议  Bug生命周期 新建	确认	解决	重新验证	关闭	重新打开</description>
    </item>
    
    <item>
      <title>用户后台管理测试用例</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E7%94%A8%E6%88%B7%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Sun, 31 May 2020 00:10:30 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E7%94%A8%E6%88%B7%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>测试用例</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Fri, 29 May 2020 23:06:14 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description>测试计划  需求 提取测试点 编写测试用例  测试用例 测试用例的定义：
执行测试的依据，将测试的操作步骤进行以文档的方式记录下来
测试用例的格式：
测试用例的模块	测试用例的编号	执行条件	测试输入	预期结果	实际结果
测试用例的模块：操作软件的一个大的菜单	命名以模块名称为主
测试用例的编号：命名以菜单下具体功能_数字
执行条件：操作的先决条件
测试输入：对具体的功能操作步骤
预期结果：以需求文档上的内容为主
实际结果：依据测试数据的内容输出后得到的结果可能与预期一致或者不一致
​
测试用例的特性：
代表性：能够代表并覆盖各种合理的和不合理、合法的和不合法的、边界的和越界的以及极限的输入数据、操作等。
针对性：对程序中的可能存在的错误有针对性地测试
可判定性：测试执行结果的正确性是可判定的，每一个测试用例都应有相应的期望结果
可重现性：对同样的测试用例，系统的执行结果应当是相同的
测试用例的输入类型：
 字母 数字 特殊符号 空字符 汉字  软件分类
OA：办公自动化
crm：客户管理系统
ERP：进销存系统
编写测试用例的时候3步骤走：
 根据需求提取测试用例的测试点 根据测试点内容输入不同数据类型 得到不用结果来编写测试用例  测试方法(测试策略)  等价类划分法 边界值法 因果图法 正交法 场景法 错误推断法  测试评审的标准  测试用例的正确性测试用例不含有争议 测试用例是否冗余 测试用例的覆盖率 测试用例是否满足需求文档  评审的内容有以下几个方面
 用例设计的结构安排是否清晰、合理，是否利于高效对需求进行覆盖。 优先极安排是否合理。 是否覆盖测试需求上的所有功能点。 用例是否具有很好可执行性。例如用例的前提条件、执行步骤、输入数据和期待结果是否清晰、正确_期待结果是否有明显的验证方法。 是否已经删除了冗余的用例。 是否包含充分的负面测试用例。充分的定义，如果在这里使用2&amp;amp;8法则，那就是4倍于正面用例的数量，毕竟一个健壮的软件，其中80%的代码都是在&amp;quot;保护&amp;quot;20%的功能实现。 是否从用户层面来设计用户使用场景和使用流程的测试用例。 是否简洁，复用性强。例如，可将重复度高的步骤或过程抽取出来定义为一些可复用标准步骤  </description>
    </item>
    
    <item>
      <title>测试基础</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 28 May 2020 22:38:31 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</guid>
      <description>软件开发的生命周期   客户提出需求(概念)
  根据客户的需求写出相对应的需求文档
  前端设计效果图(原型图)
后台开发人员设计与编写代码实现功能
测试人员根据需求文档编写测试计划和测试用例
  在后台开发实现功能后根据测试用例测试人员进行测试
  开发完全结束后，测试人员进行整体测试，全面测试，测试成功后进入上线
  软件上线后根据用户体验和实际效果进行小版本迭代
  软件缺陷产生的原因种类  需求变更次数频繁 理解误差 产品或者客户 开发和设计 代码问题 开发人员 运维 资源使用率产生 公司问题  测试流程  在立项会上根据客户需求编写需求文档/规格说明书，UI设计原型图后台编码，测试人员编写测试计划和测试用例 随着开发的代码实现，测试进行测试评审 主要代码实现后测试人员先进行冒烟测试 代码实现后测试执行测试用例 根据执行的结果进行对应bug提交给相对于的开发人员让其修改代码 开发修改后测试人员进行回归测试  冒烟测试：在这个软件中主要功能实现后进行测试
回归测试：在开发人员修改后进行的同一个问题的测试
软件测试的分类   按阶段划分
  单元测试：对一个模块测试
  集成测试：对多个模块测试(有一定的关联)
  系统测试：在软件编译后执行的整体测试
  验收测试：对软件执行后的用户体验的测试
​	α 阿尔法测试：有一定的开发测试人员的测试 内测
​	β 贝塔测试： 只有用户参与的测试 公测</description>
    </item>
    
    <item>
      <title>代码实现验证码功能</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 29 Apr 2020 21:44:36 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD/</guid>
      <description>现在大部分网址登录时都需要输验证码才允许登录，在这里我用python代码来实现手写一套验证码逻辑
Django后端代码 # 导入图片库 # 绘画库 from PIL import ImageDraw # 字体库 from PIL import ImageFont # 图片库 from PIL import Image # 随机库 import random # 文件流 import io # 自定义图片验证码 class MyCode(View): # 定义RGB随机颜色 def get_random_color(self): R = random.randrange(255) G = random.randrange(255) B = random.randrange(255) return(R, G, B) # 定义图片视图 def get(self, request): # 画布 img_size = (130, 60) # 定义图片对象 image = Image.new(&#39;RGB&#39;, img_size, &#39;#FFFFE0&#39;) # 定义画笔 draw = ImageDraw.</description>
    </item>
    
  </channel>
</rss>