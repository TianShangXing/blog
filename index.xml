<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TianShangXing&#39;s Blog</title>
    <link>https://tianshangxing.github.io/blog/</link>
    <description>Recent content on TianShangXing&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 15 Aug 2022 20:18:13 +0800</lastBuildDate><atom:link href="https://tianshangxing.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试用例设计方法</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 15 Aug 2022 20:18:13 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</guid>
      <description>测试用例 定义：为了某个业务目标，而编制的一组由测试输入，执行条件以及预期结果组成的案例。
测试用例核心要素 用例编号、所属模块、用例标题（验证谁在什么情况下，去做什么，最后结果是什么）、优先级、前置条件、操作步骤、测试数据、预期结果、实际结果、通过否、bugID、编写人员、编写时间、测试人员、测试时间、备注。
高质量测试用例特点 测试用例覆盖所有的用户需求 测试用例要简单明了 各类型的测试用例要齐全（正例，反例） 用最少的用例覆盖最多的需求 测试用例模板 等价类划分法 定义：等价类划分是把所有可能输入的数据 分为若干个区域，然后从每个区域中取少量有代表性的数据进行测试即可。
等价类 ：何为等价类，某个输入域的集合，在这个集合中每个输入条件都是等效的。
分类 有效等价类：指符合《需求规格说明书》，输入合理的数据集合
无效等价类：指不符合《需求规格说明书》，输入不合理的数据集合
类型 取值范围型： 输入学生成绩 0-100
恒等类型 ： 只有一个结果是正确的，其他都是错误的 例如 彩票的特等奖、必选框
布尔值型： 通过是否来进行选择，如同意协议
枚举类型： 给出选项内容，只要符合其中任意一个就可以 例如选择学历
规则类型： 给定要求，满足要求的就可以，比如邮箱
在任意文本输入框中可以填写的字符类型： 中文、英文、特殊符号、空格、空值、数字。
边界值分析法 定义：边界值分析是取稍高于或稍低于边界的一些数据进行测试。
确定边界值的方法 上点：是指边界上的点，无论此时的域是开区间还是闭区间，开区间的话，上点就是在域外，闭区间的话，上点就是在域内。
遵循的原则：开外闭内
离点：是指离上点最近的点，这里就跟是闭区间还是开区间就有关系了，如果是开区间，那么离点就在域内，如果是闭区间，那么离点就在域外。
遵循的原则：开内闭外 开区间往中间找，闭区间往外找
内点：域内的任意点都是内点。</description>
    </item>
    
    <item>
      <title>测试计划模板</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Sun, 14 Aug 2022 21:49:20 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92%E6%A8%A1%E6%9D%BF/</guid>
      <description>桥的麻袋1.0 测试计划 文档编号	QDMD_JH_CS_001	项目名称	桥的麻袋1.0 起草人员	起草时间	审核人员	审核时间	批准人员	批准时间	二〇二X年xx月 版本修订记录 版本标识	操作	作 者	日 期 目录 版本修订记录 ----------------------------------------------------- 2 一、 测试目的 ---------------------------------------------------- 4 二、 测试资源 ---------------------------------------------------- 4 三、 测试范围 ---------------------------------------------------- 5 1. 测试对象 ---------------------------------------------------- 5 2. 测试内容 ---------------------------------------------------- 5 四、 测试风险 ---------------------------------------------------- 6 五、 人员分工 ---------------------------------------------------- 6 六、 测试策略 ---------------------------------------------------- 6 七、 测试进度 ---------------------------------------------------- 7 八、 测试准则 ---------------------------------------------------- 7 九、 测试文档 ---------------------------------------------------- 8 一、测试目的 本次测试的目标是验证对桥的麻袋1.</description>
    </item>
    
    <item>
      <title>软件测试理论</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/</link>
      <pubDate>Fri, 12 Aug 2022 16:36:06 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/</guid>
      <description>软件缺陷定义 ​	软件缺陷就是通常说的Bug，它是指在软件中（包括文档和程序）存在的影响软件正常运行的问题。
软件缺陷产生的原因 需求描述不明确和频繁变更 软件需求不清晰或者开发人员对需求理解偏差，导致软件设计时偏离用户的需求目标，造成软件功 能或特征上的缺陷。此外，开发过程中客户频繁更新需求也会影响软件最终的质量。 软件结构复杂 编码问题 项目期限短 使用新技术 软件开发缺乏规范性文件指导 缺乏软件质量控制管理 软件缺陷分类 V模型 W模型 软件测试流程 阶段名 工作内容 产出物 测试准备阶段 项目立项、需求分析、需求评审 需求文档/产品PRD 测试计划阶段 编写测试计划、测试计划评审 测试计划 测试设计阶段 提取测试点、编写测试用例、测试用例评审 测试用例 测试执行阶段 冒烟测试、执行测试用例、提交bug、待bug修复后进行回归测试 缺陷报告 测试完成阶段 验收测试、编写测试报告、项目上线、线上环境灰度验证 测试报告 软件测试原则 原则一:测试显示软件存在缺陷
测试只能证明软件中存在缺陷，但并不能证明软件中不存在缺陷。软件测试是为了降低存在缺陷的可能性，即便是没有找到缺陷，也不能证明软件是完美的。
原则二:穷尽测试是不可能的
现在软件的规模越来越大，复杂度越来越高，想做到完全性的测试是不可能的。在测试阶段，测试人员可以根据风险和优先级来进行集中和高强度的测试，从而保证软件的质量。
原则三:测试尽早介入
为什么测试要尽早介入呢，简单的说就是保证软件质量，降低风险和成本。测试人员一般在需求阶段就开始介入，使缺陷在需求或设计阶段就被发现，缺陷发现越早，修复的成本就越小。
原则四:缺陷集群性(2/8原则)
缺陷集群性表明小部分模块包含大部分的缺陷。软件测试中存在Pareto原则:80%的缺陷发现在 20%的模块中。一个功能模块发现的缺陷越高，那存在的未被发现的缺陷也越高，故发现的缺陷与未发现的缺陷成正比。
原则五:杀虫剂悖论
反复使用相同的杀虫剂会导致害虫对杀虫剂产生免疫而无法杀死害虫。软件测试也一样。如果一直使用相同的测试方法或手段，可能无法发现新的bug。为了解决这个问题，测试用例应当定期修订和评审，增加新的或不同的测试用例帮助发现更多的缺陷。
测试人员不能一直依赖于现有的测试技术，而要不断的提升测试方法以提高测试效率。
原则六:测试活动依赖于测试内容
根据业务的不同，软件测试内部也分为不同的行业，比如游戏行业、电商行业、金融行业。不同的行业，测试活动的开展都有所不同，比如测试技术、测试工具的选择，测试流程都不尽相同，所以软件测试的活动开展依赖于所测试的内容。
原则七:没有错误是好是谬论
有可能99%没有bug的软件也是不能使用的。如果对错误的需求进行了彻底的测试，这种情况就发 生了。软件测试不仅是找出缺陷，同时也需要确认软件是否满足需求。如果开发出来的产品不满足 用户的需求，即便找到和修复了缺陷也作用不大。
原则八:程序员不能自测之后就上线
原则九:严格执行测试计划，排除测试的随意性
原则十:应当对每一个测试结果做全面的检查
原则十一:妥善保存测试计划、测试用例、出错统计和最终分析报告，为维护提供方便
原则十二:设计测试用例时，应当包括合理的输入数据和不合理的输入数据
原则十三:测试用例应由测试数据和与之对应的预期输出结果这两部分组成
软件测试分类 按照测试原理分类 ​黑盒测试、白盒测试、灰盒测试
黑盒测试(Black Box -Test):把被测试的软件看做一个黑盒子，我们不去关心盒子里边的结构是什么样子，只关心软件的输入数据和输出结果。有人把黑盒测试比作中医，通过“望闻问切”来判断是否有问题。
“望”:观察软件的行为是否正常。
“闻”:检查输出的结果是否正确。
“问”:输入各种信息，结合“望”，“闻”来观察软件的响应。</description>
    </item>
    
    <item>
      <title>软件开发理论背景</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%90%86%E8%AE%BA%E8%83%8C%E6%99%AF/</link>
      <pubDate>Thu, 11 Aug 2022 21:06:48 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%90%86%E8%AE%BA%E8%83%8C%E6%99%AF/</guid>
      <description>软件开发模式 1、瀑布模式 定义： 将软件生命周期的各项活动规定为按固定顺序而连接的若干阶段工作，形如瀑布流水，最终得到软件产品的项目。
优点：
为项目提供了按阶段划分的检查点 当前一阶段完成后，只需要去关注后续阶段。 缺点：
各个阶段的划分完全固定，阶段之间产生大量的文档，极大地增加了工作量。 由于开发模型是线性的，用户只有等到整个过程的末期才能见到开发成果，从而增加了开发风险。 通过过多的强制完成日期和里程碑来跟踪各个项目阶段。 瀑布模型的突出缺点是不适应用户需求的变化。 2、快速原型模型 ​	快速原型模型的第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，用户或客户对原型进行评价，进一步细化待开发软件的需求。通过逐步调整原型使其满足客户的要求，开发人员可以确定客户的真正需求是什么；第二步则在第一步的基础上开发客户满意的软件产品。
​ 快速原型的关键在于尽可能快速地建造出软件原型，一旦确定了客户的真正需求，所建造的原型将被丢弃。因此，原型系统的内部结构并不重要，重要的是必须迅速建立原型，随之迅速修改原型，以反映客户的需求。
3、螺旋模型 ​	1988年，巴利·玻姆(Barry Boehm)正式发表了软件系统开发的“螺旋模型”，它将瀑布模型和快速原型模型结合起来，强调了其他模型所忽视的风险分析，特别适合于大型复杂的系统。
​	螺旋模型沿着螺线进行若干次迭代，图中的四个象限代表了以下活动：
制定计划：确定软件目标，选定实施方案，弄清项目开发的限制条件；
风险分析：分析评估所选方案，考虑如何识别和消除风险；
实施工程：实施软件开发和验证；
客户评估：评价开发工作，提出修正建议，制定下一步计划。
螺旋模型由风险驱动，强调可选方案和约束条件从而支持软件的重用，有助于将软件质量作为特殊目标融入产品开发之中。但是，螺旋模型也有一定的限制条件，具体如下：
螺旋模型强调风险分析，但要求许多客户接受和相信这种分析，并做出相关反应是不容易的，因此，这种模型往往适应于内部的大规模软件开发。
如果执行风险分析将大大影响项目的利润，那么进行风险分析毫无意义，因此，螺旋模型只适合于大规模软件项目。
软件开发人员应该擅长寻找可能的风险，准确地分析风险，否则将会带来更大的风险。
4、迭代模型 ​	迭代模型（也被称作迭代增量式开发或迭代进化式开发）是一种与传统的瀑布式开发相反的软件开发过程，它弥补了传统开发方式中的一些弱点，具有更高的成功率和生产率。
​	在迭代式开发方法中，整个开发工作被组织为一系列的短小的、固定长度（如3周）的小项目，被称为一系列的迭代。每一次迭代都包括了需求分析、设计、实现与测试。采用这种方法，开发工作可以在需求被完整地确定之前启动，并在一次迭代中完成系统的一部分功能或业务逻辑的开发工作。再通过客户的反馈来细化需求，并开始新一轮的迭代。
​	与传统的瀑布模型相比较，迭代过程具有以下优点：
降低了在一个增量上的开支风险。如果开发人员重复某个迭代，那么损失只是这一个开发有误的迭代的花费。 降低了产品无法按照既定进度进入市场的风险。通过在开发早期就确定风险，可以尽早来解决而不至于在开发后期匆匆忙忙。 加快了整个开发工作的进度。因为开发人员清楚问题的焦点所在，他们的工作会更有效率。 由于用户的需求并不能在一开始就作出完全的界定，它们通常是在后续阶段中不断细化的。因此，迭代过程这种模式使适应需求的变化会更容易些。因此复用性更高 5、增量模型 ​	与建造大厦相同，软件也是一步一步建造起来的。在增量模型中，软件被作为一系列的增量构件来设计、实现、集成和测试，每一个构件是由多种相互作用的模块所形成的提供特定功能的代码片段构成。
​	增量模型在各个阶段并不交付一个可运行的完整产品，而是交付满足客户需求的一个子集的可运行产品。整个产品被分解成若干个构件，开发人员逐个构件地交付产品，这样做的好处是软件开发可以较好地适应变化，客户可以不断地看到所开发的软件，从而降低开发风险。但是，增量模型也存在以下缺陷：
​	由于各个构件是逐渐并入已有的软件体系结构中的，所以加入构件必须不破坏已构造好的系统部分，这需要软件具备开放式的体系结构。 ​	在开发过程中，需求的变化是不可避免的。增量模型的灵活性可以使其适应这种变化的能力大大优于瀑布模型和快速原型模型，但也很容易退化为边做边改模型，从而是软件过程的控制失去整体性。 ​	在使用增量模型时，第一个增量往往是实现基本需求的核心产品。核心产品交付用户使用后，经过评价形成下一个增量的开发计划，它包括对核心产品的修改和一些新功能的发布。这个过程在每个增量发布后不断重复，直到产生最终的完善产品。
​	例如，使用增量模型开发字处理软件。可以考虑，第一个增量发布基本的文件管理、编辑和文档生成功能，第二个增量发布更加完善的编辑和文档生成功能，第三个增量实现拼写和文法检查功能，第四个增量完成高级的页面布局功能。
6、敏捷开发模型 ​	敏捷开发是一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。
​	敏捷开发小组主要的工作方式可以归纳为：作为一个整体工作； 按短迭代周期工作； 每次迭代交付一些成果，关注业务优先级，检查与调整。
敏捷开发的4个核心思想：
强调面对面的沟通，人和人的相互交流胜于任何流程和工具
把精力集中在可执行的程序上，可以运行的产品胜于编制综合性文档，强调了原型、模型、demo等的重要性
团队合作和团队激励，合作胜于谈判，敏捷开发能将需求、开发、测试等全部团队成员融合成一个整体，大家都是一条线上的蚂蚱
超强的适应能力，适应变化胜于按部就班，敏捷开发的特点就是快速
敏捷软件开发要注意项目规模，规模增长，团队交流成本就上去了，因此敏捷软件开发暂时适合不是特别大的团队开发，比较适合一个组的团队使用。</description>
    </item>
    
    <item>
      <title>阶段总结</title>
      <link>https://tianshangxing.github.io/blog/blogs/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Jun 2020 10:40:46 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</guid>
      <description>软件开发的生命周期 客户提出需求(概念)
根据客户的需求写出相对应的需求文档
前端设计效果图(原型图)
后台开发人员设计与编写代码实现功能
测试人员根据需求文档编写测试计划和测试用例
在后台开发实现功能后根据测试用例测试人员进行测试
开发完全结束后，测试人员进行整体测试，全面测试，测试成功后进入上线
软件上线后根据用户体验和实际效果进行小版本迭代
测试流程 在立项会上根据客户需求编写需求文档/规格说明书，UI设计原型图后台编码，测试人员编写测试计划和测试用例 随着开发的代码实现，测试进行测试评审 主要代码实现后测试人员先进行冒烟测试 代码实现后测试执行测试用例 根据执行的结果进行对应bug提交给相对于的开发人员让其修改代码 开发修改后测试人员进行回归测试 冒烟测试：在这个软件中主要功能实现后进行测试
回归测试：在开发人员修改后进行的同一个问题的测试
软件测试的分类 按阶段划分
单元测试：对一个模块测试
集成测试：对多个模块测试(有一定的关联)
系统测试：在软件编译后执行的整体测试
验收测试：对软件执行后的用户体验的测试
​	α 阿尔法测试：有一定的开发测试人员的测试 内测
​	β 贝塔测试： 只有用户参与的测试 公测
按是否运行程序划分
静态测试：UI设计图 动态测试：由执行代码过程中产生的问题 按是否查看源代码方式划分
黑盒测试：不看源代码结构 只关心外观和能否输入输出以及响应时间
功能测试：界面 安装 兼容 易用
性能测试：压力测试 负载测试 一般性能 稳定性测试
​	压力测试：在同一时间内进行多个用户的访问 ​	负载测试：在多个用户在一段时间的持续访问
白盒测试：只看代码结构以及代码实现方式
灰盒测试：介于黑盒和白盒之间一种
软件测试的原则 尽早原则 考虑意外情况和极端情况的发生 群集现象 测出问题能够复现问题 不要在短时间进行高效测试 回归测试的关联性 善于总结相关文档 测试工具 world文档	测试计划	测试用例	缺陷报告
接口工具	charles	Fiddler	postman</description>
    </item>
    
    <item>
      <title>Python文件操作和异常捕获</title>
      <link>https://tianshangxing.github.io/blog/blogs/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</link>
      <pubDate>Sun, 21 Jun 2020 23:26:46 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</guid>
      <description>文件操作 打开文化 在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件
open(文件名，访问模式)
示例如下：
f = open(&amp;#39;test.txt&amp;#39;, &amp;#39;w&amp;#39;) 关闭文件 close( )
示例如下：
# 新建一个文件，文件名为:test.txt f = open(&amp;#39;test.txt&amp;#39;, &amp;#39;w&amp;#39;) # 关闭这个文件 f.close() 读文件 以只读模式’r’打开文件,文件不存在，报错。 read:读全部内容，得到字符串 readline:一次读一行内容，得到字符串 readlines：读全部内容，得到包含每行内容的列表
示例如下：
f = open(&amp;#34;txt.py&amp;#34;, &amp;#34;r&amp;#34;) # 以只读模式，打开文件 # 文件读 # s = f.read() # 字符串 # s = f.readline() # 字符串 s = f.readlines() # 列表 print(s) f.close() # 关闭文件 写文件 以只写&amp;quot;w&amp;quot;模式打开文件，文件不存在，创建新文件，文件存在，清空原有内容 以追加&amp;quot;a&amp;quot;模式打开文件，文件不存在，创建新文件，文件存在，在原有内容末尾添加新内容 write:将字符串写入文件内容，想换行，手动写入&amp;quot;\n&amp;quot;
示例如下：
f = open(&amp;#34;txt2.py&amp;#34;, &amp;#34;w&amp;#34;) f.write(&amp;#34;hello world&amp;#34;) # 写完，不换行 f.</description>
    </item>
    
    <item>
      <title>Python函数面向对象</title>
      <link>https://tianshangxing.github.io/blog/blogs/python%E5%87%BD%E6%95%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sat, 20 Jun 2020 22:42:10 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/python%E5%87%BD%E6%95%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>函数 # 1.	请手写一个函数，用来取出1—100（均包含）中5的倍数或者带有数字5的所有整数 # def func(b): # 定义函数 添加形参 b # # for i in range(1, b + 1): # 循环所有1-b所有数字 # if i % 5 == 0 or &amp;#34;5&amp;#34; in str(i): # 判断3的倍数或者带有数字3的所有整数 # print(i) # 输出 # # # func(100) # 调用函数 添加实参 # 2.	lis = [2,3,&amp;#39;k&amp;#39;,[&amp;#39;qwe&amp;#39;,20,[&amp;#39;k&amp;#39;,[&amp;#39;tt&amp;#39;,3,&amp;#39;1&amp;#39;]],89],&amp;#39;ab&amp;#39;,&amp;#39;adv&amp;#39;] 写一个函数将该列表中的tt变成大写 # def func(): # lis = [2, 3, &amp;#39;k&amp;#39;, [&amp;#39;qwe&amp;#39;, 20, [&amp;#39;k&amp;#39;, [&amp;#39;tt&amp;#39;, 3, &amp;#39;1&amp;#39;]], 89], &amp;#39;ab&amp;#39;, &amp;#39;adv&amp;#39;] # lis[3][2][1][0] = &amp;#39;TT&amp;#39; # 查下标替换tt 为 TT # print(lis) # # # func() # 3.</description>
    </item>
    
    <item>
      <title>Python语法进阶</title>
      <link>https://tianshangxing.github.io/blog/blogs/python%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Thu, 18 Jun 2020 22:25:49 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/python%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/</guid>
      <description>python优点 简单，易学，免费，开源，高层语言，可扩展性，可移植性，解释型语言，面向对象，丰富的库，规范的代码
变量的类型 标识符命名规则 小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName；
大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：FirstName；
下划线命名法：用下划线“_”来连接所有的单词，比如my_name。
如何在python中查找关键字 可以在Python Shell通过以下命令进行查看当前系统中python的关键字
import keyword keyword.kwlist 常用的格式符号有哪些 格式符 转换 %c 字符 %s 字符串 %d 有符号十进制整数 %u 无符号十进制整数 %f 浮点数 算术运算符 运算符 描述 + 加 - 减 * 乘 / 除 // 取整除 % 取余 ** 指数 python常用的数据类型转换 函数 说明 int(x, [base]) 将x转换为一个整数 float(x) 将x转换为一个浮点数 str(x) 将对象 x 转换为字符串 tuple(s) 将序列 s 转换为一个元组 list(s ) 将序列 s 转换为一个列表 python中的比较运算符 运算符 描述 示例 == 检查两个操作数的值是否相等，如果是则条件变为真。 如a=3,b=3，则（a == b) 为 True !</description>
    </item>
    
    <item>
      <title>Python基础语法练习</title>
      <link>https://tianshangxing.github.io/blog/blogs/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Wed, 17 Jun 2020 23:16:49 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/</guid>
      <description>Python基础语法练习 # 1.	str = &amp;#34; fgh &amp;#34; 写一个函数，只去掉字符串右侧的空格，左侧的空格保留 def func(): str = &amp;#34; fgh &amp;#34; print(str.rstrip(&amp;#39; &amp;#39;)) func() # 2.	输入10个数字到列表中，如果输入的不是数字，则跳过，不存 def func(): l = [] b = 1 while True: b += 1 if len(l) == 10: break a = input(&amp;#34;请输入数字：&amp;#34;) if a.isdigit(): a = int(a) l.append(a) else: continue print(l) func() # 3.	写一个函数，可以判断一个字符串是否为回文例子qwewq，函数返回true或者false def func(): s = input(&amp;#39;请输入字符串：&amp;#39;) if s == s[::-1]: return True else: return False print(func()) # 4.</description>
    </item>
    
    <item>
      <title>Linux下安装JDK，MySQL，tomcat</title>
      <link>https://tianshangxing.github.io/blog/blogs/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdkmysqltomcat/</link>
      <pubDate>Tue, 16 Jun 2020 22:47:04 +0800</pubDate>
      
      <guid>https://tianshangxing.github.io/blog/blogs/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdkmysqltomcat/</guid>
      <description>我本地的Linux环境是Ubuntu，安装需要用到apt命令
Ubuntu下安装JDK 更新软件包列表 sudo apt-get update 安装JDK sudo apt-get install openjdk-8-jdk 查看Java版本，看是否安装成功 java -version openjdk version &amp;#34;1.8.0_252&amp;#34; OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1ubuntu1-b09) OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode) 出现JDK版本说明安装成功
还可以通过输入java和javac查看是否安装成功
Ubuntu下安装MySQL 1.安装MySQL
sudo apt-get install mysql-server 安装完成连接MySQL mysql -h 127.0.0.1 -u root -p Enter password: 输入MySQL密码就可以链接成功 Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 15 Server version: 5.5.5-10.1.38-MariaDB mariadb.org binary distribution Copyright (c) 2000, 2020, Oracle and/or its affiliates.</description>
    </item>
    
  </channel>
</rss>
